{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SacramentService = /*#__PURE__*/(() => {\n  class SacramentService {\n    constructor(http) {\n      this.http = http;\n      this.sacramentListChangedEvent = new Subject();\n      this.sacraments = [];\n    }\n\n    sortAndSend() {\n      // this.sacraments.sort((a, b) =>\n      //   a.name > b.name ? 1 : b.name > a.name ? -1 : 0\n      // );\n      this.sacramentListChangedEvent.next(this.sacraments.slice());\n    }\n\n    getSacrament(id) {\n      // console.log(this.sacraments);\n      // return this.sacraments.find(\n      //   (sacrament) => sacrament.sacramentPlanId === id\n      // );\n      for (let s of this.sacraments) {\n        if (s.sacramentPlanId == id) {\n          return s;\n        }\n      }\n\n      return null;\n    }\n\n    getSacraments() {\n      this.http.get('https://localhost:7095/api/sacrament').subscribe(sacramentData => {\n        this.sacraments = sacramentData; // this.maxSacramentId = this.getMaxId();\n        // this.sacraments.sort((a, b) =>\n        //   a.name > b.name ? 1 : a.name < b.name ? -1 : 0\n        // );\n\n        this.sacramentListChangedEvent.next(this.sacraments.slice());\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    deleteSacrament(sacrament) {\n      if (!sacrament) {\n        return;\n      }\n\n      const pos = this.sacraments.findIndex(d => d.sacramentPlanId === sacrament.sacramentPlanId);\n\n      if (pos < 0) {\n        return;\n      } // delete from database\n\n\n      this.http.delete('https://localhost:7095/api/sacrament/' + sacrament.sacramentPlanId).subscribe(response => {\n        this.sacraments.splice(pos, 1);\n        this.sortAndSend();\n      });\n    }\n\n    addSacrament(sacrament) {\n      if (!sacrament) {\n        return;\n      } // make sure id of the new Sacrament is empty\n\n\n      sacrament.sacramentPlanId = 0;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      }); // add to database\n\n      this.http.post('https://localhost:7095/api/sacrament', sacrament, {\n        headers: headers\n      }).subscribe(responseData => {\n        // add new sacrament to sacraments\n        sacrament.sacramentPlanId = responseData.sacramentPlanId;\n        this.sacraments.push(sacrament);\n        this.sortAndSend();\n      });\n    }\n\n    updateSacrament(originalSacrament, newSacrament) {\n      if (!originalSacrament || !newSacrament) {\n        return;\n      }\n\n      const pos = this.sacraments.findIndex(d => d.sacramentPlanId === originalSacrament.sacramentPlanId);\n\n      if (pos < 0) {\n        return;\n      } // set the id of the new Sacrament to the id of the old Sacrament\n\n\n      newSacrament.sacramentPlanId = originalSacrament.sacramentPlanId; // newSacrament._id = originalSacrament._id; WHERE IS THIS??\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      }); // update database\n\n      this.http.put('https://localhost:7095/api/sacrament/' + originalSacrament.sacramentPlanId, newSacrament, {\n        headers: headers\n      }).subscribe(response => {\n        this.sacraments[pos] = newSacrament;\n        this.sortAndSend();\n      });\n    }\n\n  }\n\n  SacramentService.ɵfac = function SacramentService_Factory(t) {\n    return new (t || SacramentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SacramentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SacramentService,\n    factory: SacramentService.ɵfac,\n    providedIn: 'root'\n  });\n  return SacramentService;\n})();","map":null,"metadata":{},"sourceType":"module"}